// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps


// Test verification with incorrect proof


var SquareVerifier = artifacts.require("./SquareVerifier.sol");
var Proof = require('../../zokrates/code/square/proof1.json');
contract('SquareVerifier', accounts => {



    describe('SquareVerifier TESTING ', function () {
        beforeEach(async () => {
            this.contract = await SquareVerifier.new();
        
        });
        it('test verification with correct proof', async () => {
            // console.log("a ",Proof.proof.a);
            // console.log("b ",Proof.proof.b);
            // console.log("c ",Proof.proof.c);
            // console.log("input ",Proof.inputs);

            const result = await this.contract.verifyTx.call(Proof.proof.a, Proof.proof.b, Proof.proof.c, Proof.inputs);
            //console.log(result);
            assert.equal(result, true, "Proof invalid");
        });
        it('test verification with incorrect proof', async () => {

            // console.log("a ",Proof.proof.a);
            // console.log("b ",Proof.proof.b);
            // console.log("c ",Proof.proof.c);
            // console.log("input ",Proof.inputs);
            Proof.inputs[0]="0x0000000000000000000000000000000000000000000000000000000000000008"; // incorrect value of a
            const result = await this.contract.verifyTx.call(Proof.proof.a, Proof.proof.b, Proof.proof.c, Proof.inputs);
            //console.log(result);
            assert.equal(result, false, "Invalid ");

        });
    })


});